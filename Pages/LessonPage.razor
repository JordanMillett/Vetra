@page "/Lesson/{URL}"
@inject LessonService Lessons
@inject ProfileService Profile
@using Vetra.Components

<PageTitle>Vetra - Lesson</PageTitle>

@if (!Profile.Initialized || LessonType == -1)
{
    <Waiting />
}
else
{
    <div class="progress">
        <ProgressBar Width="@TotalFinished" Height="10" />
    </div>
    <div class="row my-4">
        <div class="col-lg-3 col-0"></div>
        <div class="col-lg-6 col-12">
            @if (TotalFinished >= 100)
            {
                <div class="text-center">
                    <br>
                    <h3><strong>You have finished this lesson!</strong></h3>
                    <br>
                    <button class="btn"><a href="">Exit Lesson</a></button>
                </div>
            }
            else
            {
                <div class="window">
                    @switch (LessonType)
                    {
                        case 0 : <LessonType_Teach @key="LessonInstance" @bind-Logic="Logic" OnFinish="@LessonFinished" /> break;
                        case 1 : <LessonType_VowelChange @key="LessonInstance" @bind-Logic="Logic" OnFinish="@LessonFinished" /> break;
                    }
                </div>
            }

        </div>
        <div class="col-lg-3 col-0"></div>
    </div>
}

@code
{
    [Parameter]
    public string URL { get; set; } = "ERROR";

    public string Key = "ERROR";

    public LessonLogic Logic = default!;

    public float TotalFinished = 0f;

    public int LessonInstance = 0;

    public int LessonType = -1;

    //POOLING SCRIPT TO ONLY SHOW USER 5 OR SET NUMBER OF NEW TERMS AT A TIME

    public void LessonFinished()
    {
        foreach (string Term in Logic.Results.Keys)
            Profile.ChangeProgress(Term, Logic.Results[Term]);

        _ = Profile.SaveProfile();
        NextLesson();
    }

    public void NextLesson()
    {
        RecalculateProgressBar();
        Logic = new LessonLogic(Key);

        Logic.Included.Add(GetNextTerm());

        LessonInstance++;
    }

    VocabHeader GetNextTerm()
    {
        string ReturnKey = Lessons.LessonHeaders[Key].Vocab[0];
        float Progress = 100f;

        for (int i = 0; i < Lessons.LessonHeaders[Key].Vocab.Count; i++)
        {
            string VocabKey = Lessons.LessonHeaders[Key].Vocab[i];

            if (!Profile.Data.LearnedVocab.Contains(VocabKey)) //Term is not known show next!
            {
                LessonType = 0;
                return Lessons.VocabHeaders[VocabKey];
            }
            else                                              //Term is known
            {
                if (Profile.Data.VocabProgression[Profile.Data.LearnedVocab.IndexOf(VocabKey)] < Progress)
                {
                    ReturnKey = VocabKey;
                    Progress = Profile.Data.VocabProgression[Profile.Data.LearnedVocab.IndexOf(VocabKey)];
                }
            }

        }

        Random Rand = new Random();
        LessonType = Rand.Next(1, 2); //include, exclude

        if(Progress == 0)
            LessonType = 0;

        return Lessons.VocabHeaders[ReturnKey];
    }

    void RecalculateProgressBar()
    {
        int Num = Lessons.LessonHeaders[Key].Vocab.Count;
        TotalFinished = 0f;

        foreach (string V in Lessons.LessonHeaders[Key].Vocab)
        {
            int index = Profile.Data.LearnedVocab.IndexOf(V);
            if (index != -1)
            {
                TotalFinished += Profile.Data.VocabProgression[index];
            }
        }

        TotalFinished /= (float)Num;

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Key = char.ToUpper(URL[0]) + URL.Substring(1);
    }

    protected override async Task OnInitializedAsync()
    {
        while (!Profile.Initialized)
        {
            await Task.Delay(250);
        }

        NextLesson();
    }    
}
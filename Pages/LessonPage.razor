@page "/Lesson/{URL}"
@inject LessonService Lessons
@inject ProfileService Profile
@using Vetra.Components

<PageTitle>Vetra - Lesson</PageTitle>

@if (!Profile.Initialized)
{
    <Waiting />
}
else
{
    <div class="progress">
        <ProgressBar Width="@TotalFinished" Height="10" />
    </div>
    <div class="row my-4">
        <div class="col-lg-3 col-0"></div>
        <div class="col-lg-6 col-12">
            <div class="window">
                <LessonTypeMatch @bind-State="State" OnFinish="@LessonFinished" />
            </div>
        </div>
        <div class="col-lg-3 col-0"></div>
    </div>
}

@code
{
    [Parameter]
    public string URL { get; set; } = "ERROR";

    public string Key = "ERROR";

    public LessonStateData State = default!;

    public float TotalFinished = 0f;

    public void LessonFinished()
    {
        for (int i = 0; i < State.Tested.Count; i++)
            Profile.ChangeProgress(State.Tested[i], State.Results[i]);

        _ = Profile.SaveProfile();
        NextLesson();
    }

    public void NextLesson()
    {
        RecalculateTotal();
        State = new LessonStateData(Key);
    }

    void RecalculateTotal()
    {
        int Num = Lessons.LessonHeaders[Key].Vocab.Count;
        TotalFinished = 0f;

        foreach (string V in Lessons.LessonHeaders[Key].Vocab)
        {
            int index = Profile.Data.LearnedVocab.IndexOf(V);
            if (index != -1)
            {
                TotalFinished += Profile.Data.VocabProgression[index];
            }
        }

        TotalFinished /= (float)Num;

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Key = char.ToUpper(URL[0]) + URL.Substring(1);
    }

    protected override async Task OnInitializedAsync()
    {
        while (!Profile.Initialized)
        {
            await Task.Delay(250);
        }

        NextLesson();
    }    
}
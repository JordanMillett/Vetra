@page "/Lesson/{URL}"
@inherits PracticePageBase
@using Vetra.Components

<PageTitle>Vetra - Lesson</PageTitle>

@if (!Profile.Initialized || Lessons.LessonType == -1 || NotImplemented.Count > 0)
{
    if (NotImplemented.Count > 0)
    {
        <p>@NotImplemented.Count Vocab Keys Missing!</p>

        <ul>
            @foreach (string S in NotImplemented)
            {
                <li><a href="https://en.wiktionary.org/wiki/@S.ToLower()#Russian" target="_blank">Wiki</a> - <p style="display:inline; user-select: all;">@S</p></li>
            }
        </ul>
    }
    else
    {
        <Waiting />
    }
}
else
{
    <div class="progress">
        <ProgressBar Width="@TotalFinished" Height="10" />
    </div>
    <div class="row">
        <div class="col-12 text-center mt-2">
            @if (StatusRight == "" && StatusWrong == "")
            {
                <h5 style="visibility: hidden;">Sapacer</h5>
            }
            <h5 class="@(StatusRight == "" ? "status-none" : "status-right")">@StatusRight</h5>
            <h5 class="@(StatusWrong == "" ? "status-none" : "status-wrong")">@StatusWrong</h5>
        </div>
    </div>
    <div class="row my-4">
        <div class="col-lg-3 col-0"></div>
        <div class="col-lg-6 col-12">
            @if (TotalFinished >= 100 && !Endless)
            {
                <div class="text-center">
                    <br>
                    <h3><strong>You have finished this lesson!</strong></h3>
                    <br>
                    <button class="btn"><a href="">Exit Lesson</a></button>
                    <button class="btn" @onclick="ToggleEndless">Continue</button>
                </div>
            }
            else
            {
                <div class="game-window">
                    @switch (Lessons.LessonType)
                    {
                        case 0 : <LessonType_Teach @key="LessonInstance" @bind-Logic="Logic" OnFinish="@LessonFinished" /> break;
                        case 1 : <LessonType_VowelChange @key="LessonInstance" @bind-Logic="Logic" OnFinish="@LessonFinished" /> break;
                        case 2 : <LessonType_Select @key="LessonInstance" @bind-Logic="Logic" OnFinish="@LessonFinished" /> break;
                        case 3 : <LessonType_Select @key="LessonInstance" @bind-Logic="Logic" OnFinish="@LessonFinished" /> break;
                    }
                </div>
            }

        </div>
        <div class="col-lg-3 col-0"></div>

        @if (TotalFinished < 100 && !Endless)
        {
            <OpenMojiWatermark />
        }
    </div>
}

@code
{
    [Parameter]
    public string URL { get; set; } = "ERROR";

    public List<string> NotImplemented = new List<string>();

    protected override void OnInitialized()
    {
        LessonKey = string.Join(' ', URL.Split(' ').Select(word => char.ToUpper(word[0]) + word.Substring(1).ToLower()));
    }

    protected override async Task OnInitializedAsync()
    {
        while (!Profile.Initialized)
        {
            await Task.Delay(250);
        }

        foreach (string S in Lessons.LessonHeaders[LessonKey].Vocab)
        {
            if (!Lessons.VocabHeaders.ContainsKey(S))
            {
                NotImplemented.Add(S);
            }
        }

        if (NotImplemented.Count == 0)
            NextLesson();
    }
}
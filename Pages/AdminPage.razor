@page "/admin"
@inject HttpClient Http
@inject HelperService Helper
@inject NotificationService Notifications
@inject IJSRuntime Runtime
@using System.Text
@using System.Text.Json
@using VetraHub

<PageTitle>Vetra - Admin</PageTitle>

<ConfirmDialog @ref="ResponsePopup" />

<h1 class="text-center"><strong>Admin Page</strong></h1>
<hr><br>

@if(DeviceEndpoint != "")
{
    <h4 class="text-center">@DeviceEndpoint</h4>
}

<div class="row text-center">
    <div class="col-4"></div>
    <div class="col-4">
        <label>Server Password</label><input type="password" @bind=@Password /><br><br>
    </div>
    <div class="col-4"></div>
</div>

<div class="buttons">
    <button class="btn" @onclick="() => SendRequest(Requests.SetAlertDevice)">Set Alert Device</button>
    <button class="btn" @onclick="() => SendRequest(Requests.ClearSubscribers)">Clear Subscribers</button>
    <button class="btn" @onclick="() => SendRequest(Requests.ClearLogs)">Clear Logs</button>
    <button class="btn" @onclick="() => SendRequest(Requests.ClearTraffic)">Clear Traffic</button>
    <button class="btn" @onclick="() => SendRequest(Requests.RestartServer)">Restart Server</button>
    <button class="btn" @onclick="() => SendRequest(Requests.ShutdownServer)">Shutdown Server</button>
</div>

<br>

<div class="row">
    <div class="col-md-6 col-12">
        <form @onsubmit="() => SendRequest(Requests.SendMessage)">
            <label>Notification Title</label><input type="text" @bind=@NotificationTitle /><br><br>
            <label>Notification Body</label><input type="text" @bind=@NotificationBody /><br><br>
            <button class="btn" type="submit">Send Message</button>
        </form>
    </div>
    <div class="col-md-6 col-12">
        <form @onsubmit="() => SendRequest(Requests.SetLimit)">
            <label>Subscriber Limit</label><input type="number" @bind=@SubCount /><br><br>
            <button class="btn" type="submit">Set Limit</button>
        </form>
    </div>
</div>

<br>

<div class="row">
    <div class="col-12">
        <form @onsubmit="() => SendRequest(Requests.GetLogs)">
            <label>Log Count</label><input type="number" @bind=@LogCount />
            <button class="btn" type="submit">Get Logs</button>
        </form>
    </div>
    <div class="col-12">
        <textarea readonly @bind="LogBody"></textarea>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <form @onsubmit="() => SendRequest(Requests.GetTraffic)">
            <label>Traffic Count</label><input type="number" @bind=@TrafficCount />
            <button class="btn" type="submit">Get Traffic</button>
        </form>
    </div>
    <div class="col-12">
        <textarea readonly @bind="TrafficBody"></textarea>
    </div>
</div>

<style>
    label
    {
    margin-right:10px;
    }

    textarea
    {
    font-family: monospace;
    resize: none;
    min-width: 100%;
    height: 500px;
    }

    .buttons
    {
    border-radius: 0.5rem; /*0.5rem for --bs-border-radius-lg */
    border-style: solid;
    border-color: var(--vetra-midtone);
    border-width: 2px;
    }
</style>

@code 
{
    ConfirmDialog ResponsePopup = default!;
    ConfirmDialogOptions Options = new ConfirmDialogOptions 
    { 
        YesButtonText = "Ok", 
        NoButtonText = null!
    };

    string NotificationTitle = "";
    string NotificationBody = "";
    string Password = "";
    string ResponseTitle = "";
    string ResponseBody = "";

    string LogCount = "";
    string LogBody = "";
    
    string TrafficCount = "";
    string TrafficBody = "";

    string SubCount = "";

    string DeviceEndpoint = "";

    protected override async Task OnInitializedAsync()
    {
        DeviceEndpoint = await Runtime.InvokeAsync<string>("getEndpoint");
        if(DeviceEndpoint != "")
            DeviceEndpoint = DeviceEndpoint[^10..];
    }

    class Request()
    {
        public required string URL = "";
        public required string OkTitle = "";
        public required string FailTitle = "";
        public required string OkBody = "";
    };

    enum Requests
    {
        SetAlertDevice,
        ClearLogs,
        ClearSubscribers,
        RestartServer,
        ShutdownServer,
        SendMessage,
        SetLimit,
        GetLogs,
        GetTraffic,
        ClearTraffic
    };

    Request GetRequestInfo(Requests Chosen)
    {
        switch (Chosen)
        {
            case Requests.SetAlertDevice: return new Request()
            {
                URL = "setalertdevice",
                OkTitle = "Alert Device Set",
                FailTitle = "Failed to Set Alert Device",
                OkBody = "This device has been made the alert device."
            };
            case Requests.ClearLogs: return new Request()
            {
                URL = "clearlogs",
                OkTitle = "Cleared Logs",
                FailTitle = "Failed to Clear Logs",
                OkBody = "Logs cleared successfully."
            };
            case Requests.ClearSubscribers: return new Request()
            {
                URL = "clearsubscribers",
                OkTitle = "Cleared Subscribers",
                FailTitle = "Failed to Clear Subscribers",
                OkBody = "Cleared subscribers successfully."
            };
            case Requests.RestartServer: return new Request()
            {
                URL = "restart",
                OkTitle = "Server Restarting",
                FailTitle = "Failed to Restart Server",
                OkBody = "Server restarting..."
            };
            case Requests.ShutdownServer: return new Request()
            {
                URL = "shutdown",
                OkTitle = "Server Shutting Down",
                FailTitle = "Failed to Shut Down Server",
                OkBody = "Server shutting down..."               
            };
            case Requests.SendMessage: return new Request()
            {
                URL = "notifications/send",
                OkTitle = "Notification Sent",
                FailTitle = "Failed to Send Notification",
                OkBody = "Your notification was sent successfully."
            };
            case Requests.SetLimit: return new Request()
            {
                URL = "setlimit",
                OkTitle = "Subscriber Limit Set",
                FailTitle = "Failed to Set Subscriber Limit",
                OkBody = "Subscriber limit set successfully."
            };
            case Requests.GetLogs: return new Request()
            {
                URL = "logs",
                OkTitle = "Logs Retrieved",
                FailTitle = "Failed to Retrieve Logs",
                OkBody = "Server logs listed below."
            };
            case Requests.ClearTraffic: return new Request()
            {
                URL = "cleartraffic",
                OkTitle = "Cleared Traffic",
                FailTitle = "Failed to Clear Traffic",
                OkBody = "Cleared traffic successfully."
            };
            case Requests.GetTraffic: return new Request()
            {
                URL = "gettraffic",
                OkTitle = "Traffic Retrieved",
                FailTitle = "Failed to Retrieve Traffic",
                OkBody = "Traffic logs listed below."
            };
        }

        return new Request()
        {
            URL = "",
            OkTitle = "",
            FailTitle = "",
            OkBody = ""
        };
    }

    async Task SendRequest(Requests Chosen)
    {
        Request RequestInfo = GetRequestInfo(Chosen);

        if (!await Notifications.ServerAlive())
        {
            ResponseTitle = RequestInfo.FailTitle;
            ResponseBody = "Unable to connect to VetraHub";
            await ResponsePopup.ShowAsync
            (
                title: ResponseTitle,
                message1: ResponseBody,
                confirmDialogOptions: Options
            );
            return;
        }

        if (Chosen == Requests.SendMessage && (NotificationTitle == "" || NotificationBody == ""))
        {
            ResponseTitle = RequestInfo.FailTitle;
            ResponseBody = "Missing header or message.";
        }else if(Chosen == Requests.SetLimit && SubCount == "")
        {
            ResponseTitle = RequestInfo.FailTitle;
            ResponseBody = "Missing subscriber limit.";
        }
        else
        {
            try
            {
                object? Data = null;

                switch (Chosen)
                {
                    case Requests.SetAlertDevice:
                        Data = new AlertDeviceMessage
                        {
                            Endpoint = await Runtime.InvokeAsync<string>("getEndpoint"),
                            Password = await Helper.Hash(Password)
                        };
                    break;
                    case Requests.SendMessage:
                        Data = new WebNotificationRequest
                        {
                            Content = new WebNotificationMessage
                            {
                                Title = NotificationTitle,
                                Body = NotificationBody
                            },
                            Password = await Helper.Hash(Password)
                        };
                    break;
                    case Requests.SetLimit:
                        Data = new SubscriberLimitMessage
                        {
                            Limit = int.TryParse(SubCount, out int limit) ? limit : -1,
                            Password = await Helper.Hash(Password)
                        };
                    break;
                    case Requests.GetLogs:
                        Data = new WebLogRequest
                        {
                            Count = int.TryParse(LogCount, out int count) ? count : 1,
                            Password = await Helper.Hash(Password)
                        };
                    break;
                    case Requests.GetTraffic:
                        Data = new WebLogRequest
                        {
                            Count = int.TryParse(TrafficCount, out int amount) ? amount : 1,
                            Password = await Helper.Hash(Password)
                        };
                    break;
                    default:
                        Data = new PasswordMessage
                        {
                            Password = await Helper.Hash(Password)
                        };
                    break;
                }

                HttpResponseMessage HttpResponse = await Http.PostAsJsonAsync("https://vetra.jordanmillett.net/api/" + RequestInfo.URL, Data);

                if (HttpResponse.IsSuccessStatusCode)
                {
                    if(Chosen == Requests.GetLogs)
                    {
                        List<DataNotificationLog>? DownloadedLogs = await HttpResponse.Content.ReadFromJsonAsync<List<DataNotificationLog>>();
                        LogBody = "";

                        if (DownloadedLogs != null)
                        {
                            foreach (DataNotificationLog Log in DownloadedLogs)
                            {
                                string localTimeFormatted = Log.Timestamp.ToLocalTime().ToString("HH:mm:ss:fff");
                                LogBody += $"[{localTimeFormatted}]\t#{Log.Id}\t{Log.Message}\n";
                            }
                        }
                        else
                        {
                            LogBody = "No logs to download";
                        }
                    }
                    
                    if(Chosen == Requests.GetTraffic)
                    {
                        List<DataTraffic>? DownloadedLogs = await HttpResponse.Content.ReadFromJsonAsync<List<DataTraffic>>();
                        TrafficBody = "";

                        if (DownloadedLogs != null)
                        {
                            foreach (DataTraffic Traffic in DownloadedLogs)
                            {
                                TrafficBody += $"{Traffic.Address} " +
                                $"{Traffic.Timezone} {Traffic.Language}\n\n";
                            }
                        }
                        else
                        {
                            TrafficBody = "No traffic to download";
                        }
                    }
                    
                    ResponseTitle = RequestInfo.OkTitle;
                    ResponseBody = RequestInfo.OkBody;
                    NotificationTitle = "";
                    NotificationBody = "";
                }
                else if (HttpResponse.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ResponseTitle = RequestInfo.FailTitle;
                    ResponseBody = "Incorrect password. Please try again.";
                    Password = "";
                }
                else
                {
                    ResponseTitle = RequestInfo.FailTitle;
                    ResponseBody = "A server error occured.";
                }
            }
            catch
            {
                ResponseTitle = RequestInfo.FailTitle;
                ResponseBody = "An client error occured.";
            }
        }

        await ResponsePopup.ShowAsync
        (
            title: ResponseTitle,
            message1: ResponseBody,
            confirmDialogOptions: Options
        );
    }
}
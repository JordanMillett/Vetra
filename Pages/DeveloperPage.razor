@page "/developer"
@using Vetra.Components
@using Vetra.Components.ProgressPage
@using System.Text.Json
@using System.Text.Json.Serialization;
@using System.Text.Encodings.Web;
@using System.Linq;
@inject LessonService Lesson;
@inject ProfileService Profile;
@inject SpeechToTextService SpeechRecognition;
@inject TextToSpeechService TTS;

<PageTitle>Vetra - Developer</PageTitle>

<h1 class="text-center"><strong>Developer Tools</strong></h1>
<hr><br>

<Tabs>
    <Tab Title="Edit" Active="true">
        <Content><br>
            <div style="display: flex;">
                <Switch @bind-Value="GenerateDictionary" Label="Generate Dictionary"/>
                <p style="margin-left: 25px; margin-right: 10px;">Template Key</p><input size="10" style="max-height: 1.5rem;" type="text" @bind="TemplateKey" />
                <p style="margin-left: 10px; font-weight: bold;">@Status</p>
            </div>
            <br>
            <div class="row">
                <div class="col-lg-6 col-12">
                    <div class="buttons">
                        <button class="btn" @onclick="() => Select(0)">LessonHeader.cs</button>
                        <button class="btn" @onclick="() => Select(1)">VocabHeader.cs</button>
                    </div>
                    <br>
                    <div class="editor">
                        @if (Selected == 0)
                        {
                            <form @onsubmit="() => Generate(false)">
                                <label>Name</label><input type="text" @bind="Class_LessonHeader.Name" />
                                <label>IconBW</label><input type="text" @bind="Class_LessonHeader.IconBW" />

                                <div class="indent">
                                    @for (int i = 0; i < Class_LessonHeader.Vocab.Count; i++)
                                    {
                                        int index = i;
                                        <label>Vocab</label><input type="text" @bind="Class_LessonHeader.Vocab[index]" />
                                    }
                                    <br>
                                    <button style="display: none;" type="submit"></button>
                                    <button class="btn" @onclick="LessonHeader_SubtractVocab"><Icon Name="IconName.DashCircle" /></button>
                                    <button class="btn" @onclick="LessonHeader_AddVocab"><Icon Name="IconName.PlusCircle" /></button>
                                </div>
                            </form>
                        }
                        @if (Selected == 1)
                        {
                            <form @onsubmit="() => Generate(false)">
                                <label>Russian</label><input type="text" @bind="Class_VocabHeader.RU" />
                                <label>English</label><input type="text" @bind="Class_VocabHeader.EN" />
                                <label>Category</label><input type="text" @bind="Class_VocabHeader.Category" />
                                <label>Gender</label><input type="text" @bind="Class_VocabHeader.Gender" />
                                <label>Icon</label><input type="text" @bind="Class_VocabHeader.Icon" />
                                <label>IconBW</label><input type="text" @bind="Class_VocabHeader.IconBW" />
                                <br>
                                <button style="display: none;" type="submit"></button>
                            </form>
                        }
                    </div>
                </div>
                <div class="col-lg-6 col-12">
                    <div class="buttons">
                        <button class="btn" @onclick="() => Generate(false)">Generate</button>
                    </div>
                    <br>
                    <textarea readonly @bind="json"></textarea>
                </div>
            </div>
        </Content>
    </Tab>
    <Tab Title="View">
        <Content><br>
            <div class="col-12">
                <div class="buttons">
                    <button class="btn" @onclick="() => ShowKeys(0)">LessonHeaders</button>
                    <button class="btn" @onclick="() => ShowKeys(1)">VocabHeaders</button>
                    <button class="btn" @onclick="() => ShowKeys(2)">Missing Words</button>
                    <button class="btn" @onclick="() => ShowKeys(3)">Unused Words</button>
                    <button class="btn" @onclick="() => ShowKeys(4)">Missing Words JSON</button>
                    <button class="btn" @onclick="() => ShowKeys(5)">Mismatched Autogen</button>
                </div>
                <br>
                <textarea readonly @bind="AllKeys"></textarea>
            </div>
        </Content>
    </Tab>
    <Tab Title="Profile">
        <Content><br>
            <div class="col-12">
                <div class="buttons">
                    <button class="btn" @onclick="() => Profile.ChangeProgress(EditTerm, false)">Fail</button>
                    <button class="btn" @onclick="() => Profile.ChangeProgress(EditTerm, true)">Pass</button>
                    <button class="btn" @onclick="() => Profile.SaveProfile()">Save</button>
                    <button class="btn" @onclick="() => Profile.ForgetTerm(EditTerm)">Forget</button>
                </div>
                <br>
                <input size="10" style="max-height: 1.5rem;" type="text" @bind="EditTerm" />
                <br>
                <div class="row">
                    @for (int i = 0; i < Profile.Data.LearnedVocab.Count; i++)
                    {
                        <TermProgress index=@i Data=Profile.Data/>
                    }
                </div>
            </div>
        </Content>
    </Tab>
    <Tab Title="Speech">
        <Content><br>
            <div class="col-12">
                <div class="buttons">
                    <button class="btn" @onclick="() => ToggleListen()">Listening : @SpeechRecognition.isRecognizing</button>
                </div>
                <br>
                <textarea readonly @bind="SpeechRecognition.Text"></textarea>
            </div>
        </Content>
    </Tab>
</Tabs>

@code
{
    LessonHeader Class_LessonHeader = new LessonHeader();
    VocabHeader Class_VocabHeader = new VocabHeader();

    string json = "";
    bool GenerateDictionary = false;
    int Selected = 0;
    string TemplateKey = "";
    string Status = "";
    string AllKeys = "";
    string EditTerm = "";

    JsonSerializerOptions MyOptions = new JsonSerializerOptions
    {
        WriteIndented = true,
        Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
        DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault
    };

    protected override void OnInitialized()
    {
        SpeechRecognition.OnRecognitionUpdated += StateHasChanged;
        SpeechRecognition.OnSpeechOver += Heard;
        Select(0);
        ShowKeys(0);
    }

    public void Dispose()
    {
        SpeechRecognition.OnRecognitionUpdated -= StateHasChanged;
        SpeechRecognition.OnSpeechOver -= Heard;
    }

    void Heard()
    {
        TTS.Speak(SpeechRecognition.Text);
    }

    void Select(int Index)
    {
        Selected = Index;
        Generate(true);
    }

    void Generate(bool Clear)
    {
        switch (Selected)
        {
            case 0: Generate_LessonHeader(Clear); break;
            case 1: Generate_VocabHeader(Clear); break;
        }
    }

    async Task ToggleListen()
    {
        if (!SpeechRecognition.isRecognizing)
        {
            await SpeechRecognition.StartRecognition();
        }
        else
        {
            await SpeechRecognition.StopRecognition();
        }
    }

    void ShowKeys(int Index)
    {
        if (Index == 0)
        {
            AllKeys = string.Join(" ", Lesson.LessonHeaders.Keys.OrderBy(key => key));
        }
        else if (Index == 1)
        {
            AllKeys = string.Join(" ", Lesson.VocabHeaders.Keys.OrderBy(key => key));
        }
        else if (Index == 2)
        {
            List<string> Missing = new List<string>();

            foreach (LessonHeader L in Lesson.LessonHeaders.Values)
            {
                foreach (string V in L.Vocab)
                {
                    if (!Lesson.VocabHeaders.ContainsKey(V))
                    {
                        Missing.Add(V);
                    }
                }
            }

            AllKeys = string.Join(" ", Missing.OrderBy(key => key));
        }
        else if (Index == 3)
        {
            AllKeys = "";

            List<string> ReferencedVocab = new List<string>();
            foreach (LessonHeader L in Lesson.LessonHeaders.Values)
            {
                foreach (string IncludedKey in L.Vocab)
                {
                    if (!ReferencedVocab.Contains(IncludedKey))
                    {
                        ReferencedVocab.Add(IncludedKey);
                    }
                }
            }

            foreach (string LoadedKey in Lesson.VocabHeaders.Keys)
            {
                if (!ReferencedVocab.Contains(LoadedKey))
                {
                    AllKeys += LoadedKey + " ";
                }
            }
        }else if (Index == 4)
        {
            Dictionary<string, VocabHeader> Missing = new Dictionary<string, VocabHeader>();

            foreach (LessonHeader L in Lesson.LessonHeaders.Values)
            {
                foreach (string V in L.Vocab)
                {
                    if (!Lesson.VocabHeaders.ContainsKey(V))
                    {
                        VocabHeader Header = AutoPopulateVocabHeader(V);

                        Missing.Add(V, Header);
                    }
                }
            }

            AllKeys = JsonSerializer.Serialize(Missing, MyOptions);
        }else if (Index == 5)
        {
            Dictionary<string, VocabHeader> Mismatched = new Dictionary<string, VocabHeader>();

            foreach (string Key in Lesson.VocabHeaders.Keys)
            {
                VocabHeader Generated = AutoPopulateVocabHeader(Key);
                VocabHeader Correct = Lesson.VocabHeaders[Key];

                if (Correct.Category == "Other")
                    break;

                if (Generated.Category != Correct.Category)
                {
                    Mismatched.Add(Key, Correct);
                    Mismatched.Add(Key + " - AUTO", Generated);
                }
            }

            AllKeys = JsonSerializer.Serialize(Mismatched, MyOptions);
        }
    }

    void Generate_LessonHeader(bool Clear)
    {
        if (Clear)
        {
            if (Lesson.LessonHeaders.ContainsKey(TemplateKey))
            {
                Class_LessonHeader = Lesson.LessonHeaders[TemplateKey];
                Status = "Generated from template!";
            }
            else
            {
                Class_LessonHeader = new LessonHeader();
                Status = "Loaded default!";
            }
        }
        else
        {
            Status = "Updated!";
        }

        Dictionary<string, LessonHeader> Dict_LessonHeader = new Dictionary<string, LessonHeader>()
        {
            {"Key", Class_LessonHeader}
        };

        if (GenerateDictionary)
        {
            json = JsonSerializer.Serialize(Dict_LessonHeader, MyOptions);
        }
        else
        {
            json = JsonSerializer.Serialize(Class_LessonHeader, MyOptions);
        }
    }

    void LessonHeader_SubtractVocab()
    {
        if(Class_LessonHeader.Vocab.Count != 0)
            Class_LessonHeader.Vocab.RemoveAt(Class_LessonHeader.Vocab.Count - 1);
    }

    void LessonHeader_AddVocab()
    {
        Class_LessonHeader.Vocab.Add("Vocab");
    }

    void Generate_VocabHeader(bool Clear)
    {
        if (Clear)
        {
            if (Lesson.VocabHeaders.ContainsKey(TemplateKey))
            {
                Class_VocabHeader = Lesson.VocabHeaders[TemplateKey];
                Status = "Generated from template!";
            }
            else
            {
                Class_VocabHeader = new VocabHeader();
                Status = "Loaded default!";
            }
        }
        else
        {
            Status = "Updated!";
        }

        Dictionary<string, VocabHeader>  Dict_VocabHeader = new Dictionary<string, VocabHeader>()
        {
            {"Key", Class_VocabHeader}
        };

        if (GenerateDictionary)
        {
            json = JsonSerializer.Serialize(Dict_VocabHeader, MyOptions);
        }
        else
        {
            json = JsonSerializer.Serialize(Class_VocabHeader, MyOptions);
        }
    }

    VocabHeader AutoPopulateVocabHeader(string Term)
    {
        VocabHeader Header = new VocabHeader();
        Header.RU = Term;

        if (Term.EndsWith("ать") || Term.EndsWith("ить"))
        {
            Header.Category = "Verb";
        }
        else if (Term.EndsWith("ый") || Term.EndsWith("ий") || Term.EndsWith("ой"))
        {
            Header.Category = "Adjective";
        }else
        {
            Header.Category = "Noun";
        }

        if (Header.Category == "Noun")
        {
            if (Term.EndsWith("а") || Term.EndsWith("я")  || Term.EndsWith("ость") || Term.EndsWith("ие"))
            {
                Header.Gender = "Feminine";
            }
            else if (Term.EndsWith("о") || Term.EndsWith("е") || Term.EndsWith("мя"))
            {
                if (Term.EndsWith("но"))
                {
                    Header.Category = "Adverb";
                }else
                {
                    Header.Gender = "Neuter";
                }
            }
            else if (Term.EndsWith("ы") || Term.EndsWith("и"))
            {
                Header.Gender = "Plural";
            }
            else
            {
                Header.Gender = "Masculine";
            }
        }

        return Header;
    }
}
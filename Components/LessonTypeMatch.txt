@inject LessonService Lessons
@inject ProfileService Profile

<h3 class="text-center">Select Matching Words</h3>

@if (State == null)
{
    return;
}

@if(State.Key != "")
{
    <div class="row py-4">
        <div class="col-6 text-center">
            @for (int i = 0; i < Lessons.LessonHeaders[State.Key].Vocab.Count; i++)
            {
                int Index = i;
                VocabHeader Item = Lessons.VocabHeaders[Lessons.LessonHeaders[State.Key].Vocab[Index]];
                <button 
                class="btn @(Active == Item.EN ? "chosen": State.Tested.Contains(Item.RU) ? "done":"")"
                @onclick="() => Select(Item.EN)">@Item.EN</button>
            }
        </div>
        <div class="col-6 text-center">
            @for (int i = 0; i < Lessons.LessonHeaders[State.Key].Vocab.Count; i++)
            {
                int Index = i;
                VocabHeader Item = Lessons.VocabHeaders[Lessons.LessonHeaders[State.Key].Vocab[Index]];
                <button 
                class="btn @(Active == Item.RU ? "chosen": State.Tested.Contains(Item.RU) ? "done":"")" 
                @onclick="() => Select(Item.RU)">@Item.RU</button>
            }
        </div>
    </div>
} else
{ 
    <Waiting />
}

<style>
    .done
    {
    visibility:hidden;
    }

    .chosen
    {
    outline-offset: 2px !important;
    outline-style: solid !important;
    outline-width: 3px !important;
    outline-color: var(--vetra-dark-red) !important;
    }

    .btn
    {
    min-width: 100%;
    margin-bottom: 30px;
    }    
</style>

@code
{
    [Parameter, EditorRequired]
    public LessonStateData State {get; set;} = default!;

    [Parameter]
    public EventCallback<LessonStateData> StateChanged { get; set; }

    [Parameter, EditorRequired]
    public Action? OnFinish { get; set; }

    string Active = "";

    void Select(string Chosen)
    {
        if (Active == "")
        {
            Active = Chosen;
        }
        else
        {
            if (Lessons.VocabHeaders.ContainsKey(Chosen)) //if Chosen is Russian
            {
                if (!Lessons.VocabHeaders.ContainsKey(Active)) //if Active is English
                {

                    if (Lessons.VocabHeaders[Chosen].EN == Active)
                    {
                        State.Tested.Add(Chosen);
                        State.Results.Add(true);
                        StateChanged.InvokeAsync(State);

                        Active = "";
                    }
                    else
                    {
                        //State.Tested.Add(Chosen);
                        //State.Results.Add(false);
                        //StateChanged.InvokeAsync(State);

                        Active = "";
                    }
                }
                else
                {
                    Active = Chosen;
                }
            }
            else                                         //if Chosen is English
            {
                if (Lessons.VocabHeaders.ContainsKey(Active)) //if Active is Russian
                {
                    if (Lessons.VocabHeaders[Active].EN == Chosen)
                    {
                        State.Tested.Add(Active);
                        State.Results.Add(true);
                        StateChanged.InvokeAsync(State);

                        Active = "";
                    }
                    else
                    {
                        
                        //State.Tested.Add(Active);
                        //State.Results.Add(false);
                        //StateChanged.InvokeAsync(State);

                        Active = "";
                    }
                }
                else
                {
                    Active = Chosen;
                }
            }
        }

        if (State.Tested.Count == Lessons.LessonHeaders[State.Key].Vocab.Count)
            OnFinish?.Invoke();

        /*
            if (RightSelected != -1)
            {
                if (Index == RightSelected)
                {
                    State.Tested.Add(Lessons.LessonHeaders[State.Key].Vocab[Index]);
                    State.Results.Add(true);
                    StateChanged.InvokeAsync(State);

                    LeftSelected = -1;
                    RightSelected = -1;

                    if (State.Tested.Count == Lessons.LessonHeaders[State.Key].Vocab.Count)
                        OnFinish?.Invoke();
                }
                else
                {
                    LeftSelected = Index;
                }
            }*/
    }
    }
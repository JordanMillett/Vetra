@inherits LessonTypeBase

@if (NotReady())
    return;

<div class="row">
    <div class="col-12 text-center">

        <h4 class="mb-5"><strong>Translate the Term</strong></h4>

        @if (FindEnglish)
        {
            <div class="clickable" @onclick="() => SpeakOneShot()">

                <VocabIcon />
                <h1>@Logic.Term.RU</h1>
                @if(Settings.Data.ShowTransliteration)
                {
                    <h5>(@Helper.Transliterate(Logic.Term.RU))</h5>
                }

            </div>
        }else
        { 
            <VocabIcon Vocab="@Logic.Term"/>
            <h1>@Logic.Term.EN</h1>
        }

        <br>

        <button class="btn mb-1" @onclick="() => Chosen(0)">@Options[0]</button>
        <button class="btn mb-1" @onclick="() => Chosen(1)">@Options[1]</button>
        <button class="btn mb-1" @onclick="() => Chosen(2)">@Options[2]</button>
        <button class="btn mb-1" @onclick="() => Chosen(3)">@Options[3]</button>
    </div>
</div>

@code
{
    int CorrectIndex = 0;
    List<string> Options = new List<string>();
    bool FindEnglish = false;

    protected override void OnInitialized()
    {
        CorrectIndex = Rand.Next(0, 4);
        FindEnglish = Rand.NextDouble() > 0.5f;

        if (FindEnglish)
            SpeakOneShot();

        for (int i = 0; i < 4; i++)
        {
            if (i == CorrectIndex)
            {
                Options.Add(FindEnglish ? Logic.Term.EN : Logic.Term.RU);
            }
            else
            {
                string Word = "";

                do
                {
                    int RandomIndex = Rand.Next(0, Logic.Filler.Count);

                    if (FindEnglish)
                    {
                        Word = Logic.Filler[RandomIndex].EN;
                    }
                    else
                    {
                        Word = Logic.Filler[RandomIndex].RU;
                    }

                } while (Options.Contains(Word));

                Options.Add(Word);
            }
        }
    }

    void Chosen(int Index)
    {
        if(Index == CorrectIndex)
            Logic.Passed = true;
        else
            Logic.Passed = false;

        LogicChanged.InvokeAsync(Logic);

        OnFinish?.Invoke();
    }
}
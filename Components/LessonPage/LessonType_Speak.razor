@inherits LessonTypeBase
@inject SpeechToTextService Speech

@if (NotReady())
    return;

<div class="row">
    <div class="col-12 text-center">

        <h4 class="mb-5"><strong>Say the Term in Russian</strong></h4>

        @if(ShowRussian)
        {
            <div class="clickable" @onclick="SpeakOneShot">

                <VocabIcon Vocab="@Logic.Term"/>
                <h1>@Logic.Term.RU</h1>
                @if(Settings.Data.ShowTransliteration)
                {
                    <h5>(@Helper.Transliterate(Logic.Term.RU))</h5>
                }
                
            </div>
        }else
        { 
            <VocabIcon Vocab="@Logic.Term"/>
            <h1>@Logic.Term.EN</h1>
        }

        <br>
        @if(Speech.Text == "")
        {
            <button class="btn" @onclick="() => ToggleListen()">@(Speech.isRecognizing ? "Mic On" : "Mic Off")</button>
        }else
        { 
            <button class="btn" @onclick="() => Done()">@Helper.CapitalizedCase(Speech.Text)</button>
        }
    </div>
</div>

@code
{

    bool ShowRussian = true;

    protected override void OnInitialized()
    {
        ShowRussian = Rand.NextDouble() > 0.5f;
        Speech.Text = "";
        Speech.OnRecognitionUpdated += StateHasChanged;
        Speech.OnSpeechOver += Heard;
    }

    public void Dispose()
    {
        Speech.OnRecognitionUpdated -= StateHasChanged;
        Speech.OnSpeechOver -= Heard;
    }

    void Heard()
    {
        //Console.WriteLine(Speech.Text);
        Speech.Text = Helper.CapitalizedCase(Speech.Text);
        Logic.Passed = Speech.Text.ToLower() == Logic.Term.RU.ToLower();
    }

    void Done()
    {
        Speech.Text = "";
        LogicChanged.InvokeAsync(Logic);
        OnFinish?.Invoke();
    }

    async Task ToggleListen()
    {
        if (!Speech.isRecognizing)
        {
            await Speech.StartRecognition();
        }
        else
        {
            await Speech.StopRecognition();
        }
    }
}
@inherits LessonTypeBase

@if (NotReady())
    return;

<div class="row">
    <div class="col-12 text-center">
        
        <h4 class="mb-5"><strong>Select the Right Spelling</strong></h4>
        
        <VocabIcon Vocab="@Logic.Term"/>
        <h1>@Logic.Term.EN</h1>

        <br>
        <button class="btn mb-1" @onclick="() => Chosen(0)">@GetName(0)</button>
        <button class="btn mb-1" @onclick="() => Chosen(1)">@GetName(1)</button>
        <button class="btn mb-1" @onclick="() => Chosen(2)">@GetName(2)</button>
        <button class="btn mb-1" @onclick="() => Chosen(3)">@GetName(3)</button>
    </div>
</div>

@code
{
    int NormalIndex = 0;
    List<string> Generated = new List<string>();

    protected override void OnInitialized()
    {
        NormalIndex = Rand.Next(0, 4);
        Generated.Add(Logic.Term.RU);
    }

    void Chosen(int Index)
    {
        if(Index == NormalIndex)
            Logic.Passed = true;
        else
            Logic.Passed = false;

        LogicChanged.InvokeAsync(Logic);

        OnFinish?.Invoke();
    }

    string GetName(int Index)
    {
        if (Index == NormalIndex)
            return Logic.Term.RU;

        char[] Vowels = { 'а', 'у', 'о', 'ы', 'и', 'э', 'я', 'ю', 'е' };
        List<int> VowelLocations = new List<int>();
        string Word = Logic.Term.RU;

        do
        {
            VowelLocations.Clear();

            for (int i = 0; i < Word.Length; i++)
            {
                if (Array.Exists(Vowels, c => c == Word[i]))
                    VowelLocations.Add(i);
            }

            int ChosenIndex = VowelLocations[Rand.Next(VowelLocations.Count)];
            char NewVowel = Vowels[Rand.Next(Vowels.Length)];

            Word = Word.Remove(ChosenIndex, 1).Insert(ChosenIndex, NewVowel.ToString());

        } while (Generated.Contains(Word));

        Generated.Add(Word);
        return Word;
    }
}
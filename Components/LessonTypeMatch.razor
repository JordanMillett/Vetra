@inject LessonService Lessons
@inject ProfileService Profile

<h3 class="text-center">Select Matching Words</h3>

@if (State == null)
{
    return;
}

@if(State.Key != "")
{
    <div class="row py-4">
        <div class="col-6 text-center">
            @for (int i = 0; i < Lessons.LessonHeaders[State.Key].Vocab.Count; i++)
            {
                int Index = i;
                VocabHeader Item = Lessons.VocabHeaders[Lessons.LessonHeaders[State.Key].Vocab[Index]];
                <button class="btn @(LeftSelected == Index ? "chosen":"")" @onclick="() => LeftSelect(Index)">@Item.EN</button>
            }
        </div>
        <div class="col-6 text-center">
            @for (int i = 0; i < Lessons.LessonHeaders[State.Key].Vocab.Count; i++)
            {
                int Index = i;
                VocabHeader Item = Lessons.VocabHeaders[Lessons.LessonHeaders[State.Key].Vocab[Index]];
                <button class="btn @(RightSelected == Index ? "chosen":"")" @onclick="() => RightSelect(Index)">@Item.RU</button>
            }
        </div>
    </div>
} else
{ 
    <Waiting />
}

<style>
    .chosen
    {
    outline-offset: 2px !important;
    outline-style: solid !important;
    outline-width: 3px !important;
    outline-color: var(--vetra-dark-red) !important;
    }

    .btn
    {
    min-width: 100%;
    margin-bottom: 30px;
    }    
</style>

@code
{
    [Parameter, EditorRequired]
    public LessonStateData State {get; set;} = default!;

    [Parameter]
    public EventCallback<LessonStateData> StateChanged { get; set; }

    [Parameter, EditorRequired]
    public Action? OnFinish { get; set; }

    int LeftSelected = -1;
    int RightSelected = -1;

    void LeftSelect(int Index)
    {
        LeftSelected = Index;

        State.Tested.Add(Lessons.LessonHeaders[State.Key].Vocab[Index]);
        State.Results.Add(true);
        StateChanged.InvokeAsync(State);

        OnFinish?.Invoke();
    }

    void RightSelect(int Index)
    {
        RightSelected = Index;
        
        State.Tested.Add(Lessons.LessonHeaders[State.Key].Vocab[Index]);
        State.Results.Add(false);
        StateChanged.InvokeAsync(State);

        OnFinish?.Invoke();
    }
}